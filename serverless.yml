service: serverless-sharp-image

provider:
  name: aws
  runtime: nodejs4.3
  profile: serverless-admin
  stage: dev
  region: us-east-1

custom:
  webpackIncludeModules: true # enable auto including modules

plugins:
  - serverless-webpack

package:
  include:
    - node_modules
  exclude:
    - .serverless
    - .webpack
    - coverage
    - .babelrc
    - .eslintignore
    - .eslintrc
    - .gitignore
    - LICENSE
    - package.json
    - README.md
    - serverless.yml
    - webpack.config.js

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"

# you can add packaging information here
#package:
#  exclude:
#    - exclude-me.js
#  artifact: my-service-code.zip

functions:
  sharpImage:
    description: Resizes images
    memorySize: 1024
    timeout: 30
    handler: handler.processImage
    events:
      - s3:
        bucket: ${file(config.json):sourceBucket}
        event: s3:ObjectCreated:*
        rules:
          - prefix: ${file(config.json):sourcePrefix}

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000

#resources:
#  Resources:
#    imageSourceBucket:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: ${file(config.json):sourceBucket}
#    imageDestinationBucket:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: ${file(config.json):destinationBucket}

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
